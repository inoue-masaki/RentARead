AWSTemplateFormatVersion: '2010-09-09'

Parameters:
#省略

Resources:

#VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  IGW:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

#Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet3Cidr
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet4Cidr
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c

#route table
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToInternet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  RouteToInternet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  RouteToInternet3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  RouteToInternet4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  PublicRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable3

  PublicRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable4

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySecurityGroup
      GroupDescription: Security Group to allow outbound and inbound access to the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PublicSecurityCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref PublicSecurityCidr

#ECS
  Cluster:
    Type: AWS::ECS::Cluster

#ECS Front
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendLoadBalancer
    Properties:
      Cluster: !Ref Cluster
      ServiceName: Backend
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref BackendTargetGroup
          ContainerPort: !Ref BackendPort
          ContainerName: Backend
      DesiredCount: 1
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PublicSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: MyRDSInstance
    Properties:
      RequiresCompatibilities:
      - FARGATE
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref FargateTaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: Backend
          Image: !Ref BackendImageUrl
          PortMappings:
          - ContainerPort: !Ref BackendPort
            HostPort: !Ref BackendPort
          Environment:
            - Name: DATABASE_URL
              Value: !Sub 'postgres://${DbUsername}:${DbPassword}@${DBInstanceEndpointAddressParameter.Value}:${DBInstanceEndpointPortParameter.Value}/${DatabaseName}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: Backend

  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: '*'

  FargateTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: FargateTaskExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB security group for RDS instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref DbSecurityCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref DbSecurityCidr

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBName: !Ref DatabaseName
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      AllocatedStorage: '20'
      BackupRetentionPeriod: '3'
      DBInstanceIdentifier: DBinstance
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

#SSM

# #データベースのエンドポイント（URL）をSSMに保存
  DBInstanceEndpointAddressParameter:
    Type: AWS::SSM::Parameter
    DependsOn: MyRDSInstance
    Properties:
      Name: DBInstanceEndpointAddress
      Type: String
      Value: !GetAtt MyRDSInstance.Endpoint.Address

# #データベースのエンドポイント（ポート）をSSMに保存
  DBInstanceEndpointPortParameter:
    Type: AWS::SSM::Parameter
    DependsOn: MyRDSInstance
    Properties:
      Name: DBInstanceEndpointPort
      Type: String
      Value: !GetAtt MyRDSInstance.Endpoint.Port

#LogGroup
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Backend-log-group
      RetentionInDays: 1

  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: !Ref FrontendListerPort
      Protocol: HTTP

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !Ref FrontendTargetPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: !Ref BackendListerPort
      Protocol: HTTP

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !Ref BackendTargetPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  LoadBalancerDNSParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/LoadBalancer/DNSName'
      Type: 'String'
      Value: !GetAtt 'BackendLoadBalancer.DNSName'




